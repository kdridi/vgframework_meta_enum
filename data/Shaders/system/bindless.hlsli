#ifndef _BINDLESS__HLSLI_
#define _BINDLESS__HLSLI_

#define  BINDLESS_TEXTURE_SRV_COUNT      16384
#define  BINDLESS_TEXTURE_SRV_OFFSET     0
#define  BINDLESS_TEXTURE_SRV_INVALID    (BINDLESS_TEXTURE_SRV_OFFSET + BINDLESS_TEXTURE_SRV_COUNT - 1)
#define  BINDLESS_TEXTURE_SRV_BINDING    0

#define  BINDLESS_BUFFER_SRV_COUNT       16384
#define  BINDLESS_BUFFER_SRV_OFFSET      BINDLESS_TEXTURE_SRV_COUNT
#define  BINDLESS_BUFFER_SRV_INVALID     (BINDLESS_BUFFER_SRV_OFFSET + BINDLESS_BUFFER_SRV_COUNT - 1)
#define  BINDLESS_BUFFER_SRV_BINDING     1

#define  BINDLESS_TEXTURE_UAV_COUNT      16384
#define  BINDLESS_TEXTURE_UAV_OFFSET     (BINDLESS_TEXTURE_SRV_COUNT + BINDLESS_BUFFER_SRV_COUNT)
#define  BINDLESS_TEXTURE_UAV_INVALID    (BINDLESS_TEXTURE_UAV_OFFSET + BINDLESS_TEXTURE_UAV_COUNT - 1)
#define  BINDLESS_TEXTURE_UAV_BINDING    2

#define  BINDLESS_BUFFER_UAV_COUNT       16349
#define  BINDLESS_BUFFER_UAV_OFFSET      (BINDLESS_TEXTURE_SRV_COUNT + BINDLESS_BUFFER_SRV_COUNT + BINDLESS_TEXTURE_UAV_COUNT)
#define  BINDLESS_BUFFER_UAV_INVALID     (BINDLESS_BUFFER_UAV_OFFSET + BINDLESS_BUFFER_UAV_COUNT - 1)
#define  BINDLESS_BUFFER_UAV_BINDING     3

#define  BINDLESS_CONSTANTBUFFER_COUNT   35
#define  BINDLESS_CONSTANTBUFFER_OFFSET  (BINDLESS_TEXTURE_SRV_COUNT + BINDLESS_BUFFER_SRV_COUNT + BINDLESS_TEXTURE_UAV_COUNT + BINDLESS_BUFFER_UAV_COUNT)
#define  BINDLESS_CONSTANTBUFFER_INVALID (BINDLESS_CONSTANTBUFFER_OFFSET + BINDLESS_CONSTANTBUFFER_COUNT - 1)
#define  BINDLESS_CONSTANTBUFFER_BINDING 4

#define  BINDLESS_ELEMENT_COUNT (BINDLESS_TEXTURE_SRV_COUNT + BINDLESS_BUFFER_SRV_COUNT + BINDLESS_TEXTURE_UAV_COUNT + BINDLESS_BUFFER_UAV_COUNT  + BINDLESS_CONSTANTBUFFER_COUNT)

#ifndef __cplusplus

#ifdef VULKAN
#define USE_BYTEADDRESSBUFFER 0
#define ByteAddressBuffer Buffer<uint>
#else
#define USE_BYTEADDRESSBUFFER 1
#endif

#ifdef DX12
#define DECL_DESCRIPTOR_RANGE_RO(type, name, bind, offset) type name[] : register(t##offset, space##bind);
#define DECL_DESCRIPTOR_RANGE_RW(type, name, bind, offset) type name[] : register(u##offset, space##bind);
#elif defined(VULKAN)
#define DECL_DESCRIPTOR_RANGE_RO(type, name, bind, offset) [[vk::binding(bind, 0)]] type name[];
#define DECL_DESCRIPTOR_RANGE_RW(type, name, bind, offset) [[vk::binding(bind, 0)]] type name[];
#endif

// Read-only textures
DECL_DESCRIPTOR_RANGE_RO(Texture1D, g_Texture1DTable, 0, 0); //BINDLESS_TEXTURE_SRV_OFFSET);
DECL_DESCRIPTOR_RANGE_RO(Texture2D, g_Texture2DTable, 0, 0); //BINDLESS_TEXTURE_SRV_OFFSET);
DECL_DESCRIPTOR_RANGE_RO(Texture3D, g_Texture3DTable, 0, 0); //BINDLESS_TEXTURE_SRV_OFFSET);

// Read-only buffers
DECL_DESCRIPTOR_RANGE_RO(ByteAddressBuffer, g_BufferTable, 1, 16384); //BINDLESS_BUFFER_SRV_OFFSET);

// Read-Only buffers
DECL_DESCRIPTOR_RANGE_RW(RWTexture2D<float4>, g_RWTexture2DTable, 2, 32768); //BINDLESS_TEXTURE_UAV_OFFSET);

// Read-Write buffers
DECL_DESCRIPTOR_RANGE_RW(RWByteAddressBuffer, g_RWBufferTable, 3, 49152); //BINDLESS_BUFFER_UAV_OFFSET);

// use #define here because of a Vulkan shader compiler crash :(
#define getTexture2D(_handle)       (g_Texture2DTable[_handle - BINDLESS_TEXTURE_SRV_OFFSET])
#define getBuffer(_handle)          (g_BufferTable[_handle - BINDLESS_BUFFER_SRV_OFFSET])

#define getRWTexture2D(_handle)     (g_RWTexture2DTable[_handle BINDLESS_TEXTURE_UAV_OFFSET])
#define getRWBuffer(_handle)        (g_RWBufferTable[_handle - BINDLESS_BUFFER_UAV_OFFSET])

//#define getConstantBuffer(_handle)  (RWBufferTable[_handle - BINDLESS_BUFFER_UAV_OFFSET])

#endif // _DRIVER__HLSLI_

#endif // __cplusplus
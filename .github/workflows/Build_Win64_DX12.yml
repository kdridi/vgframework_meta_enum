name: "Build Win64 DX12"

on:
  workflow_dispatch:
  push:
    paths:
      - "src/version.h"

env:
  SOLUTION_FILE_PATH: vgframework.sln
  BUILD_PLATFORM: '"Win64 DX12"'

permissions:
  contents: write

jobs:
  build_release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.11.2, 18.0.0)'

      - name: Restore NuGet packages
        run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Build Release
        run: msbuild /m /p:Configuration=Release /p:Platform=${{ env.BUILD_PLATFORM }} ${{ env.SOLUTION_FILE_PATH }}

  build_final:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.11.2, 18.0.0)'

      - name: Restore NuGet packages
        run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Build Final
        run: msbuild /m /p:Configuration=Final /p:Platform=${{ env.BUILD_PLATFORM }} ${{ env.SOLUTION_FILE_PATH }}

  submit_binaries:
    runs-on: windows-latest
    needs: [build_release, build_final]
    steps:
      - uses: actions/checkout@v4

      - name: Read version, copy client files, and push binaries
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          # Read GIT_REVISION from commit.h
          if (Test-Path "src/commit.h") {
            $versionContent = Get-Content "src/commit.h"
            $gitRevision = ""

            foreach ($line in $versionContent) {
              if ($line -like '*#define GIT_REVISION*') {
                $parts = $line -split '"'
                if ($parts.Length -ge 2) {
                  $gitRevision = $parts[1]
                  break
                }
              }
            }

            if (-not $gitRevision) {
              Write-Error "GIT_REVISION not found in commit.h"
              exit 1
            }
          } else {
            Write-Error "commit.h file not found!"
            exit 1
          }

          # Read version from version.h
          if (Test-Path "src/version.h") {
            $versionContent = Get-Content "src/version.h"
            $major = ""
            $minor = ""
            $patch = ""

            foreach ($line in $versionContent) {
              if ($line -match '#define VG_FRAMEWORK_VERSION_MAJOR (\d+)') {
                $major = $matches[1]
              } elseif ($line -match '#define VG_FRAMEWORK_VERSION_MINOR (\d+)') {
                $minor = $matches[1]
              } elseif ($line -match '#define VG_FRAMEWORK_VERSION_PATCH (\d+)') {
                $patch = $matches[1]
              }
            }

            if ($major -and $minor -and $patch) {
              $fullVersion = "$major.$minor.$patch"
              $commitMessage = "Editor and Game $fullVersion ($gitRevision)"
              Write-Host "Commit message: $commitMessage"
            } else {
              Write-Error "Version components not found in version.h"
              exit 1
            }
          } else {
            Write-Error "version.h file not found!"
            exit 1
          }

          # Run the batch file to create client file copies
          cmd /c script\copy_client_files.bat

          # Configure Git and push changes
          git config user.name "VGF_Boy"
          git config user.email "VGF_Boy@users.noreply.github.com"

          # Stage Editor files
          git add -f "Editor.exe"
          git add -f "bin\x64\Release\audio.dll"
          git add -f "bin\x64\Release\editor.dll"
          git add -f "bin\x64\Release\engine.dll"
          git add -f "bin\x64\Release\game.dll"
          git add -f "bin\x64\Release\physics.dll"
          git add -f "bin\x64\Release_DX12\renderer.dll"
          
          # Stage Game files
          git add -f "Game.exe"
          git add -f "bin\x64\Final\audio.dll"
          git add -f "bin\x64\Final\engine.dll"
          git add -f "bin\x64\Final\game.dll"
          git add -f "bin\x64\Final\physics.dll"
          git add -f "bin\x64\Final_DX12\renderer.dll"

          git commit -m "$commitMessage"
          git push
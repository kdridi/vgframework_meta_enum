# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: "Build Win64 DX12"

on:
  workflow_dispatch:  # This line allows manual triggering

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: vgframework.sln
  BUILD_PLATFORM: '"Win64 DX12"'  # When command-line arguments contain spaces, they must be enclosed in quotes.

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
  
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.11.2, 18.0.0)'

      - name: Restore NuGet packages
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Build Release
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: msbuild /m /p:Configuration=Release /p:Platform=${{ env.BUILD_PLATFORM }} ${{ env.SOLUTION_FILE_PATH }}

      - name: Build Final
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: msbuild /m /p:Configuration=Final /p:Platform=${{ env.BUILD_PLATFORM }} ${{ env.SOLUTION_FILE_PATH }}

      - name: Read GIT_REVISION from version.h
        id: read_version
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          # Check if the version.h file exists
          if (Test-Path "src/version.h") {
            # Use PowerShell to extract the GIT_REVISION value from version.h
            $versionContent = Get-Content "src/version.h"

            # Output the content for debugging
            Write-Host "Version file content:"
            Write-Host $versionContent

            # Attempt to match the pattern with flexible whitespace handling
            if ($versionContent -match '#define\s+GIT_REVISION\s+"(.*?)"') {
              $gitRevision = $matches[1]
              echo "VERSION_CONTENT=${gitRevision}" >> $GITHUB_ENV
            } else {
              Write-Error "GIT_REVISION not found in version.h"
              exit 1
            }
          } else {
            Write-Error "version.h file not found!"
            exit 1
          }

      - name: Push binaries to repository
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        if: success()
        run: |
          # Configure Git
          git config user.name "VGF_Boy"
          git config user.email "VGF_Boy@users.noreply.github.com"

          # Stage Editor files
          git add -f "Editor.exe"
          git add -f "bin\x64\Release\audio.dll"
          git add -f "bin\x64\Release\editor.dll"
          git add -f "bin\x64\Release\engine.dll"
          git add -f "bin\x64\Release\game.dll"
          git add -f "bin\x64\Release\physics.dll"
          git add -f "bin\x64\Release_DX12\renderer.dll"
          
          # Stage Game files
          git add -f "Game.exe"
          git add -f "bin\x64\Final\audio.dll"
          git add -f "bin\x64\Final\engine.dll"
          git add -f "bin\x64\Final\game.dll"
          git add -f "bin\x64\Final\physics.dll"
          git add -f "bin\x64\Final_DX12\renderer.dll"

          # Generate a commit message from the version content
          COMMIT_MESSAGE="Editor and Game binaries $VERSION_CONTENT"

          # Commit changes with the generated commit message
          git commit -m "$COMMIT_MESSAGE"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}